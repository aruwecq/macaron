import React, { useState } from 'react';
import { Mail, Lock, User, Eye, EyeOff } from 'lucide-react';
import { useAuth } from '../../../shared/components/context/AuthContext';
import Button from '../../../shared/components/Button/Button';
import Input from '../../../shared/components/Card/Input/Input';
import Card from '../../../shared/components/Card/Card';
import './LoginPage.scss';

const LoginPage = () => {
  const { setIsAuthenticated } = useAuth();
  const [isRegisterMode, setIsRegisterMode] = useState(false);
  const [showPassword, setShowPassword] = useState(false);
  const [showConfirmPassword, setShowConfirmPassword] = useState(false);
  
  const [formData, setFormData] = useState({
    email: '',
    password: '',
    confirmPassword: ''
  });
  
  const [errors, setErrors] = useState({});

  const validateForm = () => {
    const newErrors = {};
    
    if (!formData.email) {
      newErrors.email = '–≠–ª–µ–∫—Ç—Ä–æ–Ω–Ω–∞—è –ø–æ—á—Ç–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–∞';
    } else if (!/\S+@\S+\.\S+/.test(formData.email)) {
      newErrors.email = '–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç email';
    }
    
    if (!formData.password) {
      newErrors.password = '–ü–∞—Ä–æ–ª—å –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω';
    } else if (formData.password.length < 6) {
      newErrors.password = '–ü–∞—Ä–æ–ª—å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –Ω–µ –º–µ–Ω–µ–µ 6 —Å–∏–º–≤–æ–ª–æ–≤';
    }
    
    if (isRegisterMode) {
      if (!formData.confirmPassword) {
        newErrors.confirmPassword = '–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–∞—Ä–æ–ª—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ';
      } else if (formData.password !== formData.confirmPassword) {
        newErrors.confirmPassword = '–ü–∞—Ä–æ–ª–∏ –Ω–µ —Å–æ–≤–ø–∞–¥–∞—é—Ç';
      }
    }
    
    setErrors(newErrors);
    return Object.keys(newErrors).length === 0;
  };

  const handleSubmit = (e) => {
    e.preventDefault();
    
    if (validateForm()) {
      // –ò–º–∏—Ç–∞—Ü–∏—è API –≤—ã–∑–æ–≤–∞
      setTimeout(() => {
        setIsAuthenticated(true);
      }, 1000);
    }
  };

  const updateFormData = (field, value) => {
    setFormData(prev => ({ ...prev, [field]: value }));
    if (errors[field]) {
      setErrors(prev => ({ ...prev, [field]: '' }));
    }
  };

  return (
    <div className="login-page">
      <div className="login-container">
        <div className="login-header">
          <div className="brand">
            <div className="logo">üç¨</div>
            <h1>Sweet Macarons</h1>
            <p>–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å</p>
          </div>
        </div>
        
        <Card padding="lg">
          <form onSubmit={handleSubmit} className="login-form">
            <h2 className="form-title">
              {isRegisterMode ? '–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è' : '–í—Ö–æ–¥ –≤ —Å–∏—Å—Ç–µ–º—É'}
            </h2>
            
            <div className="form-fields">
              <div className="input-with-icon">
                <Mail className="input-icon" size={20} />
                <Input
                  type="email"
                  placeholder="–í–≤–µ–¥–∏—Ç–µ —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω—É—é –ø–æ—á—Ç—É"
                  value={formData.email}
                  onChange={(value) => updateFormData('email', value)}
                  error={errors.email}
                  required
                />
              </div>
              
              <div className="input-with-icon">
                <Lock className="input-icon" size={20} />
                <Input
                  type={showPassword ? 'text' : 'password'}
                  placeholder="–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å"
                  value={formData.password}
                  onChange={(value) => updateFormData('password', value)}
                  error={errors.password}
                  required
                />
                <button
                  type="button"
                  className="password-toggle"
                  onClick={() => setShowPassword(!showPassword)}
                >
                  {showPassword ? <EyeOff size={20} /> : <Eye size={20} />}
                </button>
              </div>
              
              {isRegisterMode && (
                <div className="input-with-icon">
                  <Lock className="input-icon" size={20} />
                  <Input
                    type={showConfirmPassword ? 'text' : 'password'}
                    placeholder="–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å"
                    value={formData.confirmPassword}
                    onChange={(value) => updateFormData('confirmPassword', value)}
                    error={errors.confirmPassword}
                    required
                  />
                  <button
                    type="button"
                    className="password-toggle"
                    onClick={() => setShowConfirmPassword(!showConfirmPassword)}
                  >
                    {showConfirmPassword ? <EyeOff size={20} /> : <Eye size={20} />}
                  </button>
                </div>
              )}
            </div>
            
            <div className="form-actions">
              <Button type="submit" fullWidth size="lg">
                {isRegisterMode ? '–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è' : '–í–æ–π—Ç–∏'}
              </Button>
              
              <button
                type="button"
                className="switch-mode"
                onClick={() => {
                  setIsRegisterMode(!isRegisterMode);
                  setErrors({});
                  setFormData({ email: '', password: '', confirmPassword: '' });
                }}
              >
                {isRegisterMode 
                  ? '–£–∂–µ –µ—Å—Ç—å –∞–∫–∫–∞—É–Ω—Ç? –í–æ–π—Ç–∏' 
                  : '–ù–µ—Ç –∞–∫–∫–∞—É–Ω—Ç–∞? –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è'
                }
              </button>
            </div>
          </form>
        </Card>
      </div>
    </div>
  );
};

export default LoginPage;