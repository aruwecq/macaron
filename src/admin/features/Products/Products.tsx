import React, { useState } from 'react';
import { Plus, Edit, Trash2, Eye } from 'lucide-react';
import Button from '../../shared/components/Button/Button';
import Card from '../../shared/components/Card/Card';
import Modal from '../../shared/components/Card/Input/Modal/Modal';
import ProductForm from './ProductForm';
import './Products.scss';

interface Product {
  id: string;
  name: string;
  image: string;
  flavor: string;
  price: number;
  composition: string;
  nutrition: string;
  shelfLife: string;
  inStock: boolean;
}

const Products: React.FC = () => {
  const [isModalOpen, setIsModalOpen] = useState(false);
  const [modalType, setModalType] = useState<'add' | 'edit' | 'delete' | 'view'>('add');
  const [selectedProduct, setSelectedProduct] = useState<Product | null>(null);

  const products: Product[] = [
    {
      id: '1',
      name: '–í–∞–Ω–∏–ª—å–Ω—ã–µ –º–∞–∫–∞—Ä–æ–Ω—Å',
      image: 'https://images.pexels.com/photos/1070850/pexels-photo-1070850.jpeg?auto=compress&cs=tinysrgb&w=400',
      flavor: '–í–∞–Ω–∏–ª—å',
      price: 150,
      composition: '–ú–∏–Ω–¥–∞–ª—å–Ω–∞—è –º—É–∫–∞, —Å–∞—Ö–∞—Ä–Ω–∞—è –ø—É–¥—Ä–∞, –±–µ–ª–∫–∏, –∫—Ä–∞—Å–∏—Ç–µ–ª—å, –≤–∞–Ω–∏–ª—å–Ω—ã–π —ç–∫—Å—Ç—Ä–∞–∫—Ç',
      nutrition: '–ö–∞–ª–æ—Ä–∏–∏: 120 –∫–∫–∞–ª, –ë–µ–ª–∫–∏: 3–≥, –ñ–∏—Ä—ã: 5–≥, –£–≥–ª–µ–≤–æ–¥—ã: 18–≥',
      shelfLife: '7 –¥–Ω–µ–π',
      inStock: true
    },
    {
      id: '2',
      name: '–®–æ–∫–æ–ª–∞–¥–Ω—ã–µ –º–∞–∫–∞—Ä–æ–Ω—Å',
      image: 'https://images.pexels.com/photos/1070850/pexels-photo-1070850.jpeg?auto=compress&cs=tinysrgb&w=400',
      flavor: '–®–æ–∫–æ–ª–∞–¥',
      price: 170,
      composition: '–ú–∏–Ω–¥–∞–ª—å–Ω–∞—è –º—É–∫–∞, —Å–∞—Ö–∞—Ä–Ω–∞—è –ø—É–¥—Ä–∞, –±–µ–ª–∫–∏, –∫–∞–∫–∞–æ, —Ç–µ–º–Ω—ã–π —à–æ–∫–æ–ª–∞–¥',
      nutrition: '–ö–∞–ª–æ—Ä–∏–∏: 140 –∫–∫–∞–ª, –ë–µ–ª–∫–∏: 4–≥, –ñ–∏—Ä—ã: 6–≥, –£–≥–ª–µ–≤–æ–¥—ã: 19–≥',
      shelfLife: '7 –¥–Ω–µ–π',
      inStock: true
    },
    {
      id: '3',
      name: '–ö–ª—É–±–Ω–∏—á–Ω—ã–µ –º–∞–∫–∞—Ä–æ–Ω—Å',
      image: 'https://images.pexels.com/photos/1070850/pexels-photo-1070850.jpeg?auto=compress&cs=tinysrgb&w=400',
      flavor: '–ö–ª—É–±–Ω–∏–∫–∞',
      price: 160,
      composition: '–ú–∏–Ω–¥–∞–ª—å–Ω–∞—è –º—É–∫–∞, —Å–∞—Ö–∞—Ä–Ω–∞—è –ø—É–¥—Ä–∞, –±–µ–ª–∫–∏, –∫–ª—É–±–Ω–∏—á–Ω—ã–π –ø–æ—Ä–æ—à–æ–∫',
      nutrition: '–ö–∞–ª–æ—Ä–∏–∏: 125 –∫–∫–∞–ª, –ë–µ–ª–∫–∏: 3–≥, –ñ–∏—Ä—ã: 5–≥, –£–≥–ª–µ–≤–æ–¥—ã: 20–≥',
      shelfLife: '5 –¥–Ω–µ–π',
      inStock: false
    }
  ];

  const openModal = (type: typeof modalType, product?: Product) => {
    setModalType(type);
    setSelectedProduct(product || null);
    setIsModalOpen(true);
  };

  const closeModal = () => {
    setIsModalOpen(false);
    setSelectedProduct(null);
  };

  const renderModalContent = () => {
    switch (modalType) {
      case 'add':
      case 'edit':
        return <ProductForm product={selectedProduct} onClose={closeModal} />;
      
      case 'view':
        return selectedProduct ? (
          <div className="product-details">
            <img src={selectedProduct.image} alt={selectedProduct.name} className="product-image-large" />
            <div className="product-info">
              <h3>{selectedProduct.name}</h3>
              <div className="info-grid">
                <div className="info-item">
                  <span className="label">–í–∫—É—Å:</span>
                  <span>{selectedProduct.flavor}</span>
                </div>
                <div className="info-item">
                  <span className="label">–¶–µ–Ω–∞:</span>
                  <span>‚ÇΩ{selectedProduct.price}</span>
                </div>
                <div className="info-item">
                  <span className="label">–°–æ—Å—Ç–∞–≤:</span>
                  <span>{selectedProduct.composition}</span>
                </div>
                <div className="info-item">
                  <span className="label">–ü–∏—â–µ–≤–∞—è —Ü–µ–Ω–Ω–æ—Å—Ç—å:</span>
                  <span>{selectedProduct.nutrition}</span>
                </div>
                <div className="info-item">
                  <span className="label">–°—Ä–æ–∫ —Ö—Ä–∞–Ω–µ–Ω–∏—è:</span>
                  <span>{selectedProduct.shelfLife}</span>
                </div>
              </div>
            </div>
          </div>
        ) : null;
      
      case 'delete':
        return (
          <div className="delete-confirmation">
            <p>–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –ø—Ä–æ–¥—É–∫—Ç "{selectedProduct?.name}"?</p>
            <p className="warning">–≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å.</p>
          </div>
        );
      
      default:
        return null;
    }
  };

  const renderModalActions = () => {
    switch (modalType) {
      case 'delete':
        return (
          <>
            <Button variant="secondary" onClick={closeModal}>
              –û—Ç–º–µ–Ω–∞
            </Button>
            <Button variant="danger" onClick={closeModal}>
              –î–∞, —É–¥–∞–ª–∏—Ç—å
            </Button>
          </>
        );
      
      case 'view':
        return (
          <Button onClick={closeModal}>
            –ó–∞–∫—Ä—ã—Ç—å
          </Button>
        );
      
      default:
        return null;
    }
  };

  const getModalTitle = () => {
    switch (modalType) {
      case 'add':
        return '–î–æ–±–∞–≤–∏—Ç—å –ø—Ä–æ–¥—É–∫—Ç';
      case 'edit':
        return '–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ–¥—É–∫—Ç';
      case 'view':
        return '–ü—Ä–æ—Å–º–æ—Ç—Ä –ø—Ä–æ–¥—É–∫—Ç–∞';
      case 'delete':
        return '–£–¥–∞–ª–∏—Ç—å –ø—Ä–æ–¥—É–∫—Ç?';
      default:
        return '';
    }
  };

  return (
    <div className="products fade-in">
      <div className="products-header">
        <div>
          <h2>üç¨ –ü—Ä–æ–¥—É–∫—Ç—ã</h2>
          <p>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–∞—Ç–∞–ª–æ–≥–æ–º –º–∞–∫–∞—Ä–æ–Ω—Å</p>
        </div>
        <Button onClick={() => openModal('add')}>
          <Plus size={20} />
          –î–æ–±–∞–≤–∏—Ç—å –ø—Ä–æ–¥—É–∫—Ç
        </Button>
      </div>

      <div className="products-grid">
        {products.map((product) => (
          <Card key={product.id} className="product-card" hover>
            <div className="product-image">
              <img src={product.image} alt={product.name} />
              <div className={`product-status ${product.inStock ? 'in-stock' : 'out-of-stock'}`}>
                {product.inStock ? '–í –Ω–∞–ª–∏—á–∏–∏' : '–ù–µ—Ç –≤ –Ω–∞–ª–∏—á–∏–∏'}
              </div>
            </div>
            
            <div className="product-content">
              <h3>{product.name}</h3>
              <div className="product-meta">
                <span className="flavor">{product.flavor}</span>
                <span className="price">‚ÇΩ{product.price}</span>
              </div>
              
              <div className="product-actions">
                <button 
                  className="action-btn view"
                  onClick={() => openModal('view', product)}
                  title="–ü—Ä–æ—Å–º–æ—Ç—Ä"
                >
                  <Eye size={16} />
                </button>
                <button 
                  className="action-btn edit"
                  onClick={() => openModal('edit', product)}
                  title="–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å"
                >
                  <Edit size={16} />
                </button>
                <button 
                  className="action-btn delete"
                  onClick={() => openModal('delete', product)}
                  title="–£–¥–∞–ª–∏—Ç—å"
                >
                  <Trash2 size={16} />
                </button>
              </div>
            </div>
          </Card>
        ))}
      </div>

      <Modal
        isOpen={isModalOpen}
        onClose={closeModal}
        title={getModalTitle()}
        actions={renderModalActions()}
      >
        {renderModalContent()}
      </Modal>
    </div>
  );
};

export default Products;